// <auto-generated />
using MbDevelopment.Greenmaster.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MbDevelopment.Greenmaster.DataAccess.Migrations
{
    [DbContext(typeof(BotanicalContext))]
    [Migration("20240401103614_AddedPhylumPropToTaxonClass")]
    partial class AddedPhylumPropToTaxonClass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhylumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhylumId");

                    b.ToTable("Taxonomy.Classes");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Taxonomy.Families");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Taxonomy.Genera");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonKingdom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy.Kingdoms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The kingdom of animals.",
                            LatinName = "Animalia"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The kingdom of plants.",
                            LatinName = "Plantae"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The kingdom of fungi.",
                            LatinName = "Fungi"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The kingdom of protista.",
                            LatinName = "Protista"
                        });
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Taxonomy.Orders");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KingdomId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KingdomId");

                    b.ToTable("Taxonomy.Phyla");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cultivar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId");

                    b.ToTable("Taxonomy.Species");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", "Phylum")
                        .WithMany("RelatedClasses")
                        .HasForeignKey("PhylumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phylum");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", "Order")
                        .WithMany("RelatedFamilies")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", "Family")
                        .WithMany("RelatedGenera")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", "Class")
                        .WithMany("RelatedOrders")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonKingdom", "Kingdom")
                        .WithMany("RelatedPhyla")
                        .HasForeignKey("KingdomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kingdom");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonSpecies", b =>
                {
                    b.HasOne("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", "Genus")
                        .WithMany("RelatedSpecies")
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genus");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonClass", b =>
                {
                    b.Navigation("RelatedOrders");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonFamily", b =>
                {
                    b.Navigation("RelatedGenera");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonGenus", b =>
                {
                    b.Navigation("RelatedSpecies");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonKingdom", b =>
                {
                    b.Navigation("RelatedPhyla");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonOrder", b =>
                {
                    b.Navigation("RelatedFamilies");
                });

            modelBuilder.Entity("MbDevelopment.Greenmaster.Core.Taxonomy.TaxonPhylum", b =>
                {
                    b.Navigation("RelatedClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
